# -*- coding: utf-8 -*-

"""
Program to automatically reply with Star Info to comments
mentioning a star with scene info archived
"""
import time
from datetime import datetime, timedelta
from itertools import groupby

import prawcore

def execute(
        commentStream,
        starInfoReplyerStorage,
        refreshInterval,
        stopCondition
):
    """Execute the program"""

    starInfoReplyerCommentedDAO = starInfoReplyerStorage \
        .getStarInfoReplyerCommentedDAO

    individualStarViewGroups = __refreshStarInfoGroups(
        starInfoReplyerStorage.getIndividualStarViewDAO
    )

    nextRefreshDue = datetime.now() + timedelta(hours=refreshInterval)

    try:
        for comment in commentStream:
            if comment is None:
                if stopCondition():
                    break
                if datetime.now() >= nextRefreshDue:
                    individualStarViewGroups = __refreshStarInfoGroups(
                        starInfoReplyerStorage.getIndividualStarViewDAO
                    )
                    nextRefreshDue = datetime.now() + timedelta(
                        hours=refreshInterval
                    )
                continue

            if (
                    __isRemoved(comment) or
                    comment.author.name == 'beezassistant' or
                    comment.author.name == 'importantreplies'
            ):
                continue

            if starInfoReplyerCommentedDAO.checkExists(comment.id):
                continue

            for star, records in individualStarViewGroups.items():
                if star.lower() in comment.body.lower():

                    generatedReply = __replyWithStarInfo(comment, star, records)
                    starInfoReplyerCommentedDAO.acknowledgeComment(
                        comment.id
                    )
                    if generatedReply:
                        starInfoReplyerCommentedDAO.acknowledgeComment(
                            generatedReply.id
                        )
    except prawcore.exceptions.RequestException:
        time.sleep(10)
        execute(
            commentStream, 
            starInfoReplyerStorage,
            refreshInterval,
            stopCondition
        )


def __refreshStarInfoGroups(individualStarViewDAO):
    """
    Update the star info groups with fresh information
    from storage
    """

    individualStarViewRecords = individualStarViewDAO \
        .getIndividualStarViewRecords()
    sortedIndividualStarViewRecords = sorted(
        individualStarViewRecords,
        key=lambda record: record.getStar
    )

    return {
        star: list(records)
        for (star, records) in
        groupby(
            sortedIndividualStarViewRecords,
            key=lambda record: record.getStar
        )
    }


def __replyWithStarInfo(comment, star, records, limit=5):
    """Reply to the comment with relevant star info"""

    if limit:
        recordCount = len(records) if len(records) < limit else limit
    else:
        recordCount = len(records)

    if recordCount > 0:
        if recordCount == 1:
            header = '**{}**? We have one post ' \
                     'of theirs here if you would like to ' \
                     'check it out:\n\n'.format(star)
        else:
            header = '**{}**? We have {} posts ' \
                     'of theirs here if you would like to ' \
                     'check them out:\n\n'.format(
                        star,
                        str(recordCount) if (not limit) or (
                                recordCount < limit
                        ) else 'at least ' + str(recordCount)
                     )

        mainBody = ''

        for index in range(0, recordCount):
            mainBody += '- [{}]({})\n'.format(
                records[index].getTitle,
                'https://www.reddit.com/comments/' +
                records[index].getSubmissionId
            )
        mainBody += '\n See our entire Stars Archive [here](' \
                    'https://reddit.com/r/romanticxxx/wiki/stars_archive' \
                    ')'

        footer = '\n\n_This message was automatically generated by ' \
                 'the u/beezassistant bot for r/romanticxxx_'

        replyMarkDown = header + mainBody + footer

        return comment.reply(replyMarkDown)


def __isRemoved(comment):
    """Checking if a comment is removed"""

    try:
        author = str(comment.author.name)
    except Exception:
        author = '[Deleted]'
    if not (comment.banned_by is None) or author == '[Deleted]':
        return True
    else:
        return False
